56. Merge Intervals
class Solution{
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals){
        int n = intervals.size();
        sort(intervals.begin() , intervals.end());
        vector<vector<int>> ans;

        for(int i = 0; i < n ;i++){
            // if the current interval does not lie in the last interval
            if(ans.empty() || intervals[i][0] > ans.back()[1]){
                ans.push_back(intervals[i]);
            }
            // if the current interval lies in the last interval
            else{
                ans.back()[1] = max(ans.back()[1] , intervals[i][1]);
            }
        }
        return ans;
    }
};


88. Merge Sorted Array
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1 , j = n-1 , k = m+n-1;
        while( i >= 0 and j >= 0){
            if(nums1[i] < nums2[j]){
                nums1[k--] = nums2[j--];
            }
            else{
                nums1[k--] = nums1[i--];
            }
        }
        while( j >= 0 ){
            nums1[k--] = nums2[j--];
        }
    }
};


287. Find the Duplicate Number
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];

        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);

        fast = nums[0];

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
